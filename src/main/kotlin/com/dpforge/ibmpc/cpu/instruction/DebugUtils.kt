package com.dpforge.ibmpc.cpu.instruction

import com.dpforge.ibmpc.extensions.toHex

object DebugUtils {
    fun getMnemonic(opcode: Int) = when (opcode) {
        0x00 -> "ADD"
        0x01 -> "ADD"
        0x02 -> "ADD"
        0x03 -> "ADD"
        0x04 -> "ADD"
        0x05 -> "ADD"
        0x06 -> "PUSH"
        0x07 -> "POP"
        0x08 -> "OR"
        0x09 -> "OR"
        0x0A -> "OR"
        0x0B -> "OR"
        0x0C -> "OR"
        0x0D -> "OR"
        0x0E -> "PUSH"
        0x0F -> "Opcode ${opcode.toHex()} is no supported on 8086"
        0x10 -> "ADC"
        0x11 -> "ADC"
        0x12 -> "ADC"
        0x13 -> "ADC"
        0x14 -> "ADC"
        0x15 -> "ADC"
        0x16 -> "PUSH"
        0x17 -> "POP"
        0x18 -> "SBB"
        0x19 -> "SBB"
        0x1A -> "SBB"
        0x1B -> "SBB"
        0x1C -> "SBB"
        0x1D -> "SBB"
        0x1E -> "PUSH"
        0x1F -> "POP"
        0x20 -> "AND"
        0x21 -> "AND"
        0x22 -> "AND"
        0x23 -> "AND"
        0x24 -> "AND"
        0x25 -> "AND"
        0x26 -> "Override ES"
        0x27 -> "DAA"
        0x28 -> "SUB"
        0x29 -> "SUB"
        0x2A -> "SUB"
        0x2B -> "SUB"
        0x2C -> "SUB"
        0x2D -> "SUB"
        0x2E -> "Override CS"
        0x2F -> "DAS"
        0x30 -> "XOR"
        0x31 -> "XOR"
        0x32 -> "XOR"
        0x33 -> "XOR"
        0x34 -> "XOR"
        0x35 -> "XOR"
        0x36 -> "Override SS"
        0x37 -> "AAA"
        0x38 -> "CMP"
        0x39 -> "CMP"
        0x3A -> "CMP"
        0x3B -> "CMP"
        0x3C -> "CMP"
        0x3D -> "CMP"
        0x3E -> "Override DS"
        0x3F -> "AAS"
        in 0x40..0x47 -> "INC"
        in 0x48..0x4F -> "DEC"
        in 0x50..0x57 -> "PUSH"
        in 0x58..0x5f -> "POP"
        in 0x60..0x65 -> "Opcode ${opcode.toHex()} is no supported on 8086"
        0x66 -> "Operand-size override prefix"
        0x67 -> "Address-size override prefix"
        in 0x68..0x6F -> "Opcode ${opcode.toHex()} is no supported on 8086"
        0x70 -> "JO"
        0x71 -> "JNO"
        0x72 -> "JB"
        0x73 -> "JNC"
        0x74 -> "JE"
        0x75 -> "JNE"
        0x76 -> "JBE"
        0x77 -> "JA"
        0x78 -> "JS"
        0x79 -> "JNS"
        0x7A -> "JP"
        0x7B -> "JNP"
        0x7C -> "JL"
        0x7D -> "JGE"
        0x7E -> "JLE"
        0x7F -> "JG"
        0x80 -> "ADD/OR/ADC/SBB/AND/SUB/XOR/CMP"
        0x81 -> "ADD/OR/ADC/SBB/AND/SUB/XOR/CMP"
        0x82 -> TODO("Arithmetic and logical instructions")
        0x83 -> "ADD/ADC/SBB/AND/SUB/CMP"
        0x84 -> "TEST"
        0x85 -> "TEST"
        0x86 -> "XCHG"
        0x87 -> "XCHG"
        0x88 -> "MOV"
        0x89 -> "MOV"
        0x8A -> "MOV"
        0x8B -> "MOV"
        0x8C -> "MOV"
        0x8D -> "LEA"
        0x8E -> "MOV"
        0x8F -> "POP"
        in 0x90..0x97 -> "XCHG"
        0x98 -> "CBW"
        0x99 -> "CWD"
        0x9A -> "CALL"
        0x9B -> "FWAIT"
        0x9C -> "PUSHF"
        0x9D -> "POPF"
        0x9E -> "SAHF"
        0x9F -> "LAHF"
        0xA0 -> "MOV"
        0xA1 -> "MOV"
        0xA2 -> "MOV"
        0xA3 -> "MOV"
        0xA4 -> "MOVS"
        0xA5 -> "MOVS"
        0xA6 -> "CMPSB"
        0xA7 -> "CMPSW"
        0xA8 -> "TEST"
        0xA9 -> "TEST"
        0xAA -> "STOS"
        0xAB -> "STOS"
        0xAC -> "LODS"
        0xAD -> "LODS"
        0xAE -> "SCAS"
        0xAF -> "SCAS"
        in 0xB0..0xB7 -> "MOV"
        in 0xB8..0xBF -> "MOV"
        0xC0 -> "Opcode ${opcode.toHex()} is no supported on 8086"
        0xC1 -> "Opcode ${opcode.toHex()} is no supported on 8086"
        0xC2 -> "RETN IW"
        0xC3 -> "RET"
        0xC4 -> "LES"
        0xC5 -> "LDS"
        0xC6 -> "MOV"
        0xC7 -> "MOV"
        0xC8 -> "Opcode ${opcode.toHex()} is no supported on 8086"
        0xC9 -> "Opcode ${opcode.toHex()} is no supported on 8086"
        0xCA -> "RETF IW"
        0xCB -> "RETF"
        0xCC -> "INT 3"
        0xCD -> "INT"
        0xCE -> "INT"
        0xCF -> "IRET"
        0xD0 -> "ROL/ROR/RCL/RCR/SHL/SHR/SAR"
        0xD1 -> "ROL/ROR/RCL/RCR/SHL/SHR/SAR"
        0xD2 -> "ROL/ROR/RCL/RCR/SHL/SHR/SAR"
        0xD3 -> "ROL/ROR/RCL/RCR/SHL/SHR/SAR"
        0xD4 -> "AAM"
        0xD5 -> "AAD"
        0xD6 -> "Undefined and Reserved"
        0xD7 -> "XLAT"
        in 0xD8..0xDF -> "Floating-point arithmetic opcode ${opcode.toHex()}"
        0xE0 -> "LOOPNZ"
        0xE1 -> "LOOPZ"
        0xE2 -> "LOOP"
        0xE3 -> "JCXZ"
        0xE4 -> "IN"
        0xE5 -> "IN"
        0xE6 -> "OUT"
        0xE7 -> "OUT imm8 AX"
        0xE8 -> "CALL"
        0xE9 -> "JMP"
        0xEA -> "JMPF"
        0xEB -> "JMP"
        0xEC -> "IN"
        0xED -> "IN"
        0xEE -> "OUT"
        0xEF -> "OUT"
        0xF0 -> "LOCK"
        0xF1 -> "Undefined and Reserved"
        0xF2 -> "REPNZ"
        0xF3 -> "REP_REPZ"
        0xF4 -> "HLT"
        0xF5 -> "CMC"
        0xF6 -> "TEST/NOT/NEG/MUL/IMUL/DIV/IDIV"
        0xF7 -> "TEST/NOT/NEG/MUL/IMUL/DIV/IDIV"
        0xF8 -> "CLC"
        0xF9 -> "STC"
        0xFA -> "CLI"
        0xFB -> "STI"
        0xFC -> "CLD"
        0xFD -> "STD"
        0xFE -> "INC/DEC"
        0xFF -> "INC/DEC/CALL/CALLF/JMP/JMPF/PUSH"
        else -> "Unsupported opcode ${opcode.toHex()}"
    }
}